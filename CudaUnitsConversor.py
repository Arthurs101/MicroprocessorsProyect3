# -*- coding: utf-8 -*-
"""ProyectNew.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12Awnr9lKK0bLVvUlXNy-WEOYQ0hfigWi
"""

!pip install gspread
!pip install gspread-dataframe

from google.colab import auth
auth.authenticate_user()
import gspread

from google.colab import auth
auth.authenticate_user()

from gspread_dataframe import get_as_dataframe, set_with_dataframe
import gspread
from google.auth import default
import pandas as pd

#obtener credenciales y acceder a la spreadsheet
creds, _ = default()
gc = gspread.authorize(creds)
wb = gc.open_by_key('1sKR0fjKL4OAo0CJ8nEcXxFgp7JpG_KcJu7nSygswqgU')
ws = wb.worksheet('RawData')


df = get_as_dataframe(ws, usecols=[0,1,2,3]) #usar las primeras 4 columnas dado que ahí están los datos,  y convertirlo a data frame
df = df.dropna() #remover todos los nan



#importar cuda
from numba import cuda
import numpy as np

#cuda
@cuda.jit
def conversor(c,f,k):
    i = cuda.grid(1)
    if i < len(c):
       f[i] =  (9/5)*c[i] + 32
       k[i] = 273.15 + c[i]

#crear variables
x = df.iloc[0:,0].values.astype(np.float64)
f = np.zeros_like(x)
k = np.zeros_like(x)
#cantidad de datos a procesar
N = len(x)

#calcular los bloques (se tiene 256 hilos por bloque)
threads = 256
blocks = (N // threads) + 1
#iniciar el kernel
conversor[blocks, threads](x,f,k)
#colocar los valores en el dataframe
df["Temperatura(°F)"] = f
df["Temperatura(K)"] = k

#cambiar de los 1.0 a True y los 0's a False
df.loc[df["Iluminacion"] >= 1, "Iluminacion"] = True
df.loc[df["Iluminacion"] < 1, "Iluminacion"] = False

print(df)

#subir los valores a la datasheet
set_with_dataframe(ws, df)